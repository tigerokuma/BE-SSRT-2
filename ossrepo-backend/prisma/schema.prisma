// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id           String             @id @default(uuid())
  email             String             @unique
  name              String?
  created_at        DateTime           @default(now())
  userWatchlists    UserWatchlist[]
  email_confirmed   Boolean            @default(false)
  EmailConfirmation EmailConfirmation?
  slack        Slack?
  jira         Jira?
  emailTime    EmailTime?
  sbom              UserWatchlistSbom?
  
  // GitHub OAuth fields
  github_id         String?            @unique
  github_username   String?
  access_token      String?
  refresh_token     String?
  last_login        DateTime?

  // Project relationships
  projectUsers      ProjectUser[]
  projectWatchlist  ProjectWatchlist[]
  projectWatchlistApprovals ProjectWatchlistApproval[]
  projectWatchlistDisapprovals ProjectWatchlistDisapproval[]
  projectWatchlistComments ProjectWatchlistComment[]

  @@map("users")
}

// NEW: Fast NPM package data (always available)
model NpmPackage {
  package_name String    @id
  description  String?
  version      String?
  downloads    Int?
  keywords     String[]
  license      String?
  npm_url      String?
  homepage     String?
  published_at DateTime?
  last_updated DateTime?
  maintainers  String[]
  risk_score   Float?
  repo_url     String? // Link to GitHub repo (no foreign key constraint)
  fetched_at   DateTime  @default(now())
  has_osvvulnerabilities Boolean @default(false)
  
  // Relations
  osvVulnerabilities OsvVulnerability[]

  @@map("npm_packages")
}

// NEW: Normalized OSV vulnerability data
model OsvVulnerability {
  id            String   @id
  package_name  String
  summary       String
  severity      String?
  details       String?
  affected      Json?    // Version ranges - could be normalized further
  references    Json?    // References array - could be normalized further
  published     DateTime?
  modified      DateTime?
  
  // Enhanced filtering fields
  fixed_versions          Json?    // Array of fixed version strings
  introduced_versions     Json?    // Array of introduced version strings
  last_affected_versions  Json?    // Array of last affected version strings
  is_patched             Boolean  @default(false)
  patch_age_days         Int?     // Days since patch was released
  
  // Relations
  npmPackage    NpmPackage @relation(fields: [package_name], references: [package_name])
  
  @@index([package_name])
  @@index([is_patched])
  @@index([patch_age_days])
  @@index([published])
  @@map("osv_vulnerabilities")
}

// NEW: Detailed GitHub repository data (enriched separately)
model GitHubRepository {
  repo_url       String    @id
  repo_name      String? // e.g., "facebook/react"
  owner          String? // e.g., "facebook"
  stars          Int?
  forks          Int?
  contributors   Int?
  topics         String[] // GitHub topics/tags
  pushed_at      DateTime?
  created_at     DateTime?
  updated_at     DateTime?
  default_branch String?
  language       String? // Primary language
  fetched_at     DateTime  @default(now())

  @@map("github_repositories")
}

// EXISTING: Keep for backward compatibility during migration
model Package {
  package_id   String @id @default(uuid())
  package_name String @unique
  repo_url     String
  repo_name    String

  // Existing fields
  downloads    Int?
  last_updated DateTime?
  stars        Int?
  forks        Int? // ADD ONLY THIS LINE
  contributors Int?
  pushed_at    DateTime?
  risk_score   Float?
  fetched_at   DateTime?

  // NPM-style summary fields
  description  String?
  version      String?
  published_at DateTime?
  maintainers  String[]
  keywords     String[]
  npm_url      String?
  homepage     String?
  license      String?

  // Relations
  watchlists Watchlist[]
}

model Watchlist {
  watchlist_id                     String          @id @default(uuid())
  alert_cve_ids                    String[]
  updated_at                       DateTime?
  default_branch                   String?
  latest_commit_sha                String?
  commits_since_last_health_update Int              @default(0) // Fixed: should be 0 by default
  package_id                       String
  // New fields for background processing
  status                           String          @default("processing") // processing, ready, failed
  processing_started_at            DateTime?
  processing_completed_at          DateTime?
  last_error                       String?
  
  // Repository size tracking for cloning strategy
  repo_size_kb                     Int?             // Repository size in KB from GitHub API
  clone_time_ms                    Int?             // Time taken to clone repository in milliseconds
  analysis_strategy                String?         @default("api-only") // api-only, full-clone, hybrid
  
  // Relations
  userWatchlistEntries             UserWatchlist[]
  package                          Package         @relation(fields: [package_id], references: [package_id])
  logs                             Log[]
  healthData                       HealthData[]
  busFactorData                    BusFactorData[]
  activityData                     ActivityData[]
  aiSummaryData                    AISummaryData[]
  weeklySummaryData                WeeklySummaryData[]
  contributorStats                 ContributorStats[]
  repoStats                        RepoStats?
  alertTriggered                   AlertTriggered[]
  sbom                             WatchlistSbom?
  aiAnomaliesDetected              AIAnomaliesDetected[]
  vulnerabilities                  Vulnerability[]
  vulnerabilitySummary             VulnerabilitySummary?
}

model UserWatchlist {
  id           String     @id @default(uuid())
  user_id      String
  watchlist_id String
  added_at     DateTime   @default(now())
  alerts       String?
  notes        String?
  created_at   DateTime   @default(now())
  user         User       @relation(fields: [user_id], references: [user_id])
  watchlist    Watchlist  @relation(fields: [watchlist_id], references: [watchlist_id])
  
  AlertTriggered AlertTriggered[]

  @@index([user_id])
  @@index([watchlist_id])
}

// NEW: Health analysis data storage
model HealthData {
  id                   String   @id @default(uuid())
  watchlist_id         String
  commit_sha           String?
  commit_date          DateTime?
  scorecard_metrics    Json?
  overall_health_score Decimal? @db.Decimal(5, 2)
  analysis_date        DateTime @default(now())
  source               String   @default("scorecard") // scorecard, local-analysis
  created_at           DateTime @default(now())

  // Relations
  watchlist Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@index([commit_sha])
  @@map("health_data")
}

// NEW: Bus factor analysis data storage
model BusFactorData {
  id              String   @id @default(uuid())
  watchlist_id    String
  bus_factor      Int
  total_contributors Int
  total_commits   Int     // Total commits from all human contributors
  top_contributors Json    // Array of contributor objects
  risk_level      String   // LOW, MEDIUM, HIGH, CRITICAL
  risk_reason     String?
  analysis_date   DateTime @default(now())
  created_at      DateTime @default(now())

  // Relations
  watchlist Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("bus_factor_data")
}

// NEW: Activity analysis data storage
model ActivityData {
  id                    String   @id @default(uuid())
  watchlist_id          String
  activity_score        Int      // 0-100
  activity_level        String   // LOW, MODERATE, HIGH, VERY_HIGH
  weekly_commit_rate    Decimal  @db.Decimal(5, 2) // Average commits per week (e.g., 2.50)
  activity_factors      Json     // JSON object with the 4 factor scores: { commitFrequency: number, contributorDiversity: number, codeChurn: number, developmentConsistency: number }
  activity_heatmap      Json?    // Activity heatmap data
  peak_activity         Json?    // Peak activity information
  analysis_date         DateTime @default(now())
  created_at            DateTime @default(now())

  // Relations
  watchlist Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("activity_data")
}

// NEW: AI summary data storage
model AISummaryData {
  id           String   @id @default(uuid())
  watchlist_id String
  summary      String   @db.Text
  confidence   Float    @default(1.0)
  model_used   String   @default("gemma2:2b")
  prompt_length Int?
  output_length Int?
  generation_time_ms Int?
  created_at   DateTime @default(now())

  // Relations
  watchlist Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("ai_summary_data")
}

// NEW: Weekly AI summary data storage
model WeeklySummaryData {
  id           String   @id @default(uuid())
  watchlist_id String
  week_start   DateTime
  week_end     DateTime
  summary      String   @db.Text
  confidence   Float    @default(1.0)
  model_used   String   @default("gemma2:2b")
  metrics_summary Json? // Summary of weekly metrics
  created_at   DateTime @default(now())

  // Relations
  watchlist Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id, week_start])
  @@index([watchlist_id])
  @@index([week_start])
  @@map("weekly_summary_data")
}

model BuildTask {
  task_id      String         @id @default(uuid())
  repo_id      String
  status       String // e.g., 'queued', 'in_progress', 'completed', 'failed'
  logs         String[]
  created_at   DateTime       @default(now())
  started_at   DateTime?
  finished_at  DateTime?
  // Optionally add commit_id, assigned_to, retry_count, etc.
  commit_id    String?
  assigned_to  String?
  retry_count  Int            @default(0)
  BuildSubtask BuildSubtask[]
}

model BuildSubtask {
  subtask_id    String          @id @default(uuid())
  buildTask     BuildTask       @relation(fields: [task_id], references: [task_id], onDelete: Cascade)
  task_id       String
  language      String // e.g., 'python', 'java', etc.
  step          String // e.g., 'parse', 'graph', 'save'
  status        String // e.g., 'pending', 'in_progress', 'completed', 'failed'
  message       String? // details, errors, etc.
  created_at    DateTime        @default(now())
  started_at    DateTime?
  finished_at   DateTime?
  GraphSnapshot GraphSnapshot[]
}

model GraphExport {
  export_id  String    @id @default(uuid())
  repo_id    String
  format     String
  ready_time DateTime?
  s3_url     String?
  status     String
  actor      String?
  created_at DateTime  @default(now())
}

model AlertTriggered {
  id              String    @id @default(uuid())
  user_watchlist_id String
  watchlist_id    String
  commit_sha      String
  contributor     String
  metric          String    // e.g., 'lines_added', 'lines_deleted', 'files_changed', 'commit_time'
  value           Float
  alert_level     String    // 'mild', 'moderate', 'critical'
  threshold_type  String    // 'contributor_stddev', 'repo_average', 'absolute', 'user_defined'
  threshold_value Float
  description     String
  details_json    Json?
  created_at      DateTime  @default(now())
  acknowledged_at DateTime?
  resolved_at     DateTime?

  userWatchlist   UserWatchlist @relation(fields: [user_watchlist_id], references: [id], onDelete: Cascade)
  watchlist       Watchlist     @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([user_watchlist_id])
  @@index([watchlist_id])
  @@index([commit_sha])
  @@index([created_at])
  @@map("alert_triggered")
}

enum WaitValue {
  DAY
  WEEK
  MONTH
  YEAR
}

model EmailTime {
  id              String        @id @default(uuid())
  last_email_time DateTime
  next_email_time DateTime
  wait_value      WaitValue
  wait_unit       Int
  user   User @relation(fields: [id], references: [user_id])
}

model EmailConfirmation {
  token      String   @id @default(uuid())
  user_id    String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([expires_at])
}

model Slack {
  id            String        @id @default(uuid())
  slack_token   String
  slack_channel String?
  user   User @relation(fields: [id], references: [user_id])
}

model Jira {
  id             String        @id @default(uuid())
  webtrigger_url String
  project_key    String?
  user   User @relation(fields: [id], references: [user_id])
}

model GraphSnapshot {
  snapshot_id  String       @id @default(uuid())
  subtask_id   String
  repo_id      String
  commit_id    String?
  language     String
  graph_type   String
  version      Int
  created_at   DateTime     @default(now())
  node_count   Int?
  edge_count   Int?
  s3_url       String?
  status       String // e.g., 'stored','invalidated','expired'
  // Relations
  buildSubtask BuildSubtask @relation(fields: [subtask_id], references: [subtask_id], onDelete: Cascade)
  nodes        GraphNode[]
  edges        GraphEdge[]

  @@index([subtask_id])
  @@index([repo_id])
  @@map("graph_snapshots")
}

model GraphNode {
  node_id     String        @id @default(uuid())
  snapshot_id String
  type        String
  name        String?
  file_path   String?
  commit_id   String?
  metadata    Json?
  // Relations
  snapshot    GraphSnapshot @relation(fields: [snapshot_id], references: [snapshot_id], onDelete: Cascade)
  outgoing    GraphEdge[]   @relation("EdgeSource")
  incoming    GraphEdge[]   @relation("EdgeTarget")

  @@index([snapshot_id])
  @@index([name])
  @@map("graph_nodes")
}

model GraphEdge {
  edge_id     String        @id @default(uuid())
  snapshot_id String
  source_id   String
  target_id   String
  relation    String
  metadata    Json?
  // Relations
  snapshot    GraphSnapshot @relation(fields: [snapshot_id], references: [snapshot_id], onDelete: Cascade)
  source      GraphNode     @relation("EdgeSource", fields: [source_id], references: [node_id])
  target      GraphNode     @relation("EdgeTarget", fields: [target_id], references: [node_id])

  @@index([relation])
  @@map("graph_edges")
}

// ENHANCED: Log model with diff data support
model Log {
  event_id        String     @id @default(uuid())
  watchlist_id    String?
  event_type      String
  actor           String
  timestamp       DateTime
  payload         Json?
  event_hash      String
  prev_event_hash String?
  diff_data       Json?
  files_changed   Int?       @default(0)
  lines_added     Int?       @default(0)
  lines_deleted   Int?       @default(0)
  repository      Watchlist? @relation(fields: [watchlist_id], references: [watchlist_id])

  @@index([watchlist_id])
  @@index([event_type])
  @@index([timestamp])
  @@map("logs")
}

model ContributorStats {
  id                    String    @id @default(uuid())
  watchlist_id          String
  author_email          String
  author_name           String?
  total_commits         Int
  avg_lines_added       Float
  avg_lines_deleted     Float
  avg_files_changed     Float
  commit_time_histogram Json
  last_commit_date      DateTime
  stddev_lines_added    Float
  stddev_lines_deleted  Float
  stddev_files_changed  Float
  typical_days_active   Json
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  repository            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id, author_email])
  @@index([watchlist_id])
  @@map("contributor_stats")
}

model RepoStats {
  id                    String    @id @default(uuid())
  watchlist_id          String
  total_commits         Int
  avg_lines_added       Float
  avg_lines_deleted     Float
  avg_files_changed     Float
  stddev_lines_added    Float
  stddev_lines_deleted  Float
  stddev_files_changed  Float
  commit_time_histogram Json
  typical_days_active   Json
  last_updated          DateTime  @default(now())
  created_at            DateTime  @default(now())

  repository            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id])
  @@index([watchlist_id])
  @@map("repo_stats")
}

model TempJira {
  code            String    @unique
  project_key     String
  webtrigger_url  String
  expires_at      DateTime

  @@unique([webtrigger_url, project_key])
}

model WatchlistSbom {
  id                   String    @id @default(uuid())
  watchlist_id         String    @unique
  sbom                 Json
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())

  watchlist            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)
  @@index([watchlist_id])
}

model UserWatchlistSbom {
  id                   String    @id @default(uuid())
  user_id              String    @unique
  sbom                 Json
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())

  user User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  @@index([user_id])
}

model AIAnomaliesDetected {
  id                String    @id @default(uuid())
  watchlist_id      String
  commit_sha        String
  anomaly_details   Json
  detected_at       DateTime  @default(now())

  repository        Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id, commit_sha])
  @@index([watchlist_id])
  @@index([commit_sha])
  @@map("ai_anomalies_detected")
}

// NEW: Vulnerability data storage
model Vulnerability {
  id                String    @id @default(uuid())
  watchlist_id      String
  title             String
  description       String    @db.Text
  severity          String    // CRITICAL, HIGH, MEDIUM, LOW
  cve_id            String?
  ghsa_id           String?
  published_date    DateTime
  affected_versions String[]
  fixed_versions    String[]
  references        Json      // Array of reference objects
  created_at        DateTime  @default(now())

  // Relations
  watchlist         Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@index([severity])
  @@index([published_date])
  @@map("vulnerabilities")
}

// NEW: Vulnerability summary data storage
model VulnerabilitySummary {
  id                String    @id @default(uuid())
  watchlist_id      String    @unique
  total_count       Int       @default(0)
  critical_count    Int       @default(0)
  high_count        Int       @default(0)
  medium_count      Int       @default(0)
  low_count         Int       @default(0)
  last_updated      DateTime  @default(now())

  // Relations
  watchlist         Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("vulnerability_summaries")
}

// NEW: Projects table (with foreign key to monitored branch)
model Project {
  id                   String   @id @default(uuid())
  name                 String
  description          String?
  monitored_branch_id  String
  status               String   @default("creating") // "creating", "ready", "failed"
  error_message        String?  // Store error if setup fails
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // Project relationships
  projectUsers ProjectUser[]
  projectWatchlist ProjectWatchlist[]
  monitoredBranch MonitoredBranch @relation(fields: [monitored_branch_id], references: [id])

  @@map("projects")
}

// NEW: Monitored branches table (shared across projects)
model MonitoredBranch {
  id             String   @id @default(uuid())
  repository_url String
  branch_name    String
  is_active      Boolean  @default(true)
  webhook_id     String?  // GitHub webhook ID for this repository
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  projects       Project[]
  dependencies   BranchDependency[]

  @@unique([repository_url, branch_name])
  @@index([repository_url])
  @@index([branch_name])
  @@index([is_active])
  @@map("monitored_branches")
}

// NEW: Junction table for many-to-many relationship between projects and users
model ProjectUser {
  id        String   @id @default(uuid())
  project_id String
  user_id   String
  role      String?  // Optional role field (e.g., "admin", "member", "viewer")
  joined_at DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([project_id, user_id])
  @@index([project_id])
  @@index([user_id])
  @@map("project_users")
}

// NEW: Branch dependencies table (shared across projects monitoring the same branch)
model BranchDependency {
  id                String   @id @default(uuid())
  monitored_branch_id String
  name              String
  version           String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  monitoredBranch   MonitoredBranch @relation(fields: [monitored_branch_id], references: [id], onDelete: Cascade)

  @@unique([monitored_branch_id, name])
  @@index([monitored_branch_id])
  @@map("branch_dependencies")
}


// NEW: Project watchlist table - tracks repositories added to project watchlist
model ProjectWatchlist {
  id        String   @id @default(uuid())
  project_id String
  user_id   String
  repo_url  String
  name      String
  added_at  DateTime @default(now())
  status    String   @default("pending") // pending, reviewed, approved, rejected

  // Relations
  project   Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  approvals ProjectWatchlistApproval[]
  disapprovals ProjectWatchlistDisapproval[]
  comments  ProjectWatchlistComment[]

  @@unique([project_id, repo_url])
  @@index([project_id])
  @@index([user_id])
  @@map("project_watchlist")
}

// NEW: Project watchlist approvals table
model ProjectWatchlistApproval {
  id        String   @id @default(uuid())
  project_watchlist_id String
  user_id   String
  approved_at DateTime @default(now())

  // Relations
  projectWatchlist ProjectWatchlist @relation(fields: [project_watchlist_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([project_watchlist_id, user_id])
  @@index([project_watchlist_id])
  @@index([user_id])
  @@map("project_watchlist_approvals")
}

// NEW: Project watchlist disapprovals table
model ProjectWatchlistDisapproval {
  id        String   @id @default(uuid())
  project_watchlist_id String
  user_id   String
  disapproved_at DateTime @default(now())

  // Relations
  projectWatchlist ProjectWatchlist @relation(fields: [project_watchlist_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([project_watchlist_id, user_id])
  @@index([project_watchlist_id])
  @@index([user_id])
  @@map("project_watchlist_disapprovals")
}

// NEW: Project watchlist comments table
model ProjectWatchlistComment {
  id        String   @id @default(uuid())
  project_watchlist_id String
  user_id   String
  comment   String
  created_at DateTime @default(now())

  // Relations
  projectWatchlist ProjectWatchlist @relation(fields: [project_watchlist_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([project_watchlist_id])
  @@index([user_id])
  @@map("project_watchlist_comments")
}