import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../common/prisma/prisma.service';
import { JiraInsert, TempJiraInsert } from '../dto/jira.dto';
import { Cron } from '@nestjs/schedule';

@Injectable()
export class JiraRepository {
  constructor(private readonly prisma: PrismaService) {}

  async insertTempInfo(dto: TempJiraInsert) {
    return this.prisma.tempJira.upsert({
      where: {
        webtrigger_url_project_key: {
          // composite unique name auto-generated by Prisma
          project_key: dto.project_key,
          webtrigger_url: dto.webtrigger_url,
        },
      },
      update: {
        code: dto.code,
        expires_at: dto.expires_at,
      },
      create: {
        code: dto.code,
        project_key: dto.project_key,
        webtrigger_url: dto.webtrigger_url,
        expires_at: dto.expires_at,
      },
    });
  }

  async checkCode(code: string) {
    return this.prisma.tempJira.findUnique({
      where: { code },
    });
  }

  async getUserWatchlist(user_id: string) {
    return this.prisma.userWatchlist.findMany({
      where: { user_id: user_id },
      select: { id: true },
    });
  }

  async insertJiraInfo(jiraInsert: JiraInsert) {
    return this.prisma.jira.upsert({
      where: { id: jiraInsert.user_id },
      update: {
        webtrigger_url: jiraInsert.webtrigger_url,
        project_key: jiraInsert.project_key,
      },
      create: {
        id: jiraInsert.user_id,
        webtrigger_url: jiraInsert.webtrigger_url,
        project_key: jiraInsert.project_key,
      },
    });
  }

  async getTempJiraInfo(code: string) {
    return await this.prisma.tempJira.findUnique({
      where: { code: code },
      select: { webtrigger_url: true, project_key: true },
    });
  }

  async getJiraInfoUser(userId: string) {
    return await this.prisma.jira.findUnique({
      where: { id: userId },
      select: { webtrigger_url: true, project_key: true },
    });
  }

  async checkJiraLink(dto: any) {
    return await this.prisma.jira.findFirst({
      where: {
        webtrigger_url: dto.webtrigger_url,
        project_key: dto.project_key,
      },
      select: { user: true },
    });
  }

  async getJiraInfoUserWatch(user_watchlist_id: string) {
    const watchlistEntry = await this.prisma.userWatchlist.findUnique({
      where: { id: user_watchlist_id },
      select: { user_id: true },
    });

    if (!watchlistEntry) return null; // handle not found

    // Then get Slack info for that user_id
    const jiraInfo = await this.prisma.jira.findFirst({
      where: { id: watchlistEntry.user_id },
      select: { webtrigger_url: true, project_key: true },
    });

    return jiraInfo;
  }

  @Cron('*/15 * * * *') //every 15 minutes
  async cleanupExpiredData() {
    const deleted = await this.prisma.tempJira.deleteMany({
      where: {
        expires_at: {
          lt: new Date(),
        },
      },
    });
  }
}
