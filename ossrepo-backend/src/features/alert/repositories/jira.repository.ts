import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../common/prisma/prisma.service';
import { JiraInsert } from '../dto/jira.dto';
import { Cron } from '@nestjs/schedule';


@Injectable()
export class JiraRepository {
constructor(private readonly prisma: PrismaService) {}

    async insertTempInfo(dto: any){
        return this.prisma.tempJira.upsert({
            where: {
                webtrigger_url_project_key: { // composite unique name auto-generated by Prisma
                    project_key: dto.projectKey,
                    webtrigger_url: dto.webtriggerUrl,
                },
            },
            update: {
                code: dto.code,
                expires_at: dto.expires_at
            },
            create: {
                code: dto.code,
                project_key: dto.projectKey,
                webtrigger_url: dto.webtriggerUrl,
                expires_at: dto.expires_at
            },
        });
    }

    async checkCode(code: string) {
        return this.prisma.tempJira.findUnique({
            where: { code }
        });
    }

    async getUserWatchlist(uwlId: string) {
        return this.prisma.userWatchlist.findMany({
            where: { user_id: uwlId },
            select: { id: true}
        })
    }

    async insertJiraInfo(jiraInsert: JiraInsert) {
        return this.prisma.jira.upsert({
            where: {id: jiraInsert.userId},
            update: {
                webtrigger_url: jiraInsert.webtriggerUrl,
                project_key: jiraInsert.projectKey
            },
            create: {
                id: jiraInsert.userId,
                webtrigger_url: jiraInsert.webtriggerUrl,
                project_key: jiraInsert.projectKey
            }
        });
    }

    async getTempJiraInfo(code: string) {
        return await this.prisma.tempJira.findUnique({
        where: { code: code },
        select: { webtrigger_url: true, project_key: true },
        }); 
    }

    async getJiraInfo(userId: string) {
        return await this.prisma.jira.findUnique({
        where: { id: userId },
        select: { webtrigger_url: true, project_key: true },
        }); 
    }

    async checkJiraLink(dto: any) {
        return await this.prisma.jira.findFirst({
        where: {
            webtrigger_url: dto.webtrigger_url,
            project_key: dto.project_key
            },
            select: { user: true }
        });
    }

    @Cron('*/15 * * * *') //every 15 minutes
    async cleanupExpiredData() {
        const deleted = await this.prisma.tempJira.deleteMany({
        where: {
            expires_at: {
            lt: new Date(),
            },
        },
        });
        console.log(`üóëÔ∏è Cleaned up ${deleted.count} expired records.`);

    }
}