name: Deploy to GCP

on:
  push:
    branches: [ deployed-no-error ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ossrepo-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install
    
    - name: Generate Prisma client
      run: npx prisma generate --schema=prisma/schema.prisma
    
    - name: Build application
      run: npm run build
    
    - name: Deploy to GCP
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Create directory structure if it doesn't exist
          mkdir -p ~/BE-SSRT-2
          
          # Go to the project root directory
          cd ~/BE-SSRT-2
          
          # Clone repository if it doesn't exist
          if [ ! -d "ossrepo-backend" ]; then
            git clone https://github.com/SSRT-CSYE-7220/BE-SSRT-2.git .
          fi
          
          cd ossrepo-backend
          
          # Set up Git if this is first time
          git config --global --add safe.directory /home/ossrepotracker/BE-SSRT-2/ossrepo-backend
          
          # Fetch and update code
          git fetch origin deployed-no-error
          git checkout deployed-no-error
          git reset --hard origin/deployed-no-error
          
          # Clean install dependencies
          rm -rf node_modules
          rm -rf dist
          npm ci
          
          # Generate Prisma client with latest schema
          npx prisma generate --schema=prisma/schema.prisma
          
          # Build the application
          npm run build
          
          # Verify dist folder exists and contains main.js
          if [ ! -f "dist/main.js" ]; then
            echo "Error: dist/main.js not found after build!"
            exit 1
          fi
          
          # Start/Restart with PM2
          if pm2 list | grep -q "nestjs-api"; then
            pm2 restart nestjs-api --update-env
          else
            pm2 start dist/main.js --name nestjs-api
          fi
          
          # Verify the process is running
          pm2 list
          
          echo "âœ… Deployment completed successfully!"