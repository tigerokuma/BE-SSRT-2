import { Injectable } from '@nestjs/common';
import axios from 'axios';

export interface OsvVulnerability {
  id: string;
  summary: string;
  severity?: string;
  details?: string;
  affected_versions?: string[];
  references?: { type: string; url: string }[];
}

@Injectable()
export class OsvVulnerabilityService {
  private readonly osvApiUrl = 'https://api.osv.dev/v1/query';

  async getNpmVulnerabilities(packageName: string): Promise<OsvVulnerability[]> {
    try {
      const res = await axios.post(this.osvApiUrl, {
        package: { name: packageName, ecosystem: 'npm' }
      });
      if (!res.data.vulns) return [];
      return res.data.vulns.map((vuln: any) => ({
        id: vuln.id,
        summary: vuln.summary,
        severity: vuln.severity?.[0]?.type ? `${vuln.severity[0].type}: ${vuln.severity[0].score}` : undefined,
        details: vuln.details,
        affected_versions: vuln.affected?.flatMap((a: any) => a.ranges?.flatMap((r: any) => r.events?.map((e: any) => e.introduced || e.fixed || e.last_affected || e.limit)).filter(Boolean)) || [],
        references: vuln.references || []
      }));
    } catch (e) {
      return [];
    }
  }
} 