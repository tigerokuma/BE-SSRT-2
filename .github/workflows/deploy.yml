name: 🚀 Deploy to GCP Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  APP_NAME: 'nestjs-api'
  DEPLOY_PATH: '~/BE-SSRT-2/ossrepo-backend'

jobs:
  validate:
    name: 🔍 Code Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ossrepo-backend
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔍 Verify Repository Structure
      run: |
        echo "Repository structure:"
        ls -la
        echo "Package files before conversion:"
        ls -la package*.json pnpm-lock.yaml 2>/dev/null || echo "Some files may not exist"
        
    - name: ⚙️ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        # No cache initially since we're converting from pnpm to npm
    
    - name: 🔄 Convert from pnpm to npm
      run: |
        echo "::group::🔄 Converting project from pnpm to npm"
        
        # Remove pnpm lock file if it exists
        if [ -f "pnpm-lock.yaml" ]; then
          echo "Removing pnpm-lock.yaml"
          rm pnpm-lock.yaml
        fi
        
        # Clean any existing node_modules
        if [ -d "node_modules" ]; then
          echo "Cleaning existing node_modules"
          rm -rf node_modules
        fi
        
        # Create package-lock.json with npm install
        echo "Creating package-lock.json with npm install"
        npm install
        
        echo "✅ Successfully converted to npm"
        echo "Package files after conversion:"
        ls -la package*.json
        echo "::endgroup::"
    
    - name: 🔧 Generate Prisma Client
      run: |
        echo "::group::🔧 Generating Prisma client"
        npx prisma generate --schema=prisma/schema.prisma
        echo "✅ Prisma client generated successfully"
        echo "::endgroup::"
    
    - name: 🏗️ Build Application
      run: |
        echo "::group::🏗️ Building NestJS application"
        npm run build
        echo "✅ Application built successfully"
        echo "::endgroup::"
    
    - name: 📤 Upload package-lock.json
      uses: actions/upload-artifact@v4
      with:
        name: package-lock
        path: ossrepo-backend/package-lock.json
        retention-days: 1

  deploy:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: validate
    environment: production
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 📥 Download package-lock.json
      uses: actions/download-artifact@v4
      with:
        name: package-lock
        path: ossrepo-backend/
    
    - name: 🚀 Deploy to GCP Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        timeout: 300s
        command_timeout: 120s
        script_stop: true
        script: |
          # Color codes for beautiful logging
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          PURPLE='\033[0;35m'
          CYAN='\033[0;36m'
          WHITE='\033[1;37m'
          NC='\033[0m'
          
          # Logging functions
          log_info() { echo -e "${BLUE}ℹ️  INFO${NC}: $1"; }
          log_success() { echo -e "${GREEN}✅ SUCCESS${NC}: $1"; }
          log_warning() { echo -e "${YELLOW}⚠️  WARNING${NC}: $1"; }
          log_error() { echo -e "${RED}❌ ERROR${NC}: $1"; }
          log_step() { echo -e "\n${PURPLE}🔄 STEP${NC}: ${WHITE}$1${NC}"; }
          log_header() { echo -e "\n${CYAN}═══════════════════════════════════════${NC}"; echo -e "${CYAN}🚀 $1${NC}"; echo -e "${CYAN}═══════════════════════════════════════${NC}"; }
          
          # Start deployment
          log_header "PRODUCTION DEPLOYMENT STARTED"
          log_info "Deployment started at $(date '+%Y-%m-%d %H:%M:%S UTC')"
          log_info "Server: $(hostname)"
          log_info "User: $(whoami)"
          
          # Step 1: Navigate to project directory
          log_step "Navigating to project directory"
          cd ~/BE-SSRT-2/ossrepo-backend || {
            log_error "Failed to navigate to ~/BE-SSRT-2/ossrepo-backend"
            exit 1
          }
          log_success "Current directory: $(pwd)"
          
          # Step 2: Create backup
          log_step "Creating deployment backup"
          BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          if [ -d "dist" ]; then
            cp -r dist "$BACKUP_DIR/"
            log_success "Backup created at $BACKUP_DIR"
          else
            log_warning "No dist directory found to backup"
          fi
          
          # Step 3: Configure Git
          log_step "Configuring Git for deployment"
          git config pull.rebase false
          git config --global --add safe.directory $(pwd)
          log_success "Git configuration updated"
          
          # Step 4: Update source code
          log_step "Updating source code from repository"
          log_info "Current commit: $(git rev-parse --short HEAD)"
          
          # Fetch and update
          git fetch origin main || {
            log_error "Failed to fetch from origin"
            exit 1
          }
          
          LOCAL_COMMIT=$(git rev-parse HEAD)
          REMOTE_COMMIT=$(git rev-parse origin/main)
          
          if [ "$LOCAL_COMMIT" = "$REMOTE_COMMIT" ]; then
            log_warning "No new changes detected"
          else
            log_info "New changes found, updating codebase"
            git reset --hard origin/main || {
              log_error "Failed to update code"
              exit 1
            }
          fi
          
          log_success "Code updated to: $(git rev-parse --short HEAD)"
          
          # Step 5: Convert to npm if needed
          log_step "Converting project to npm (if needed)"
          
          # Remove pnpm files if they exist
          if [ -f "pnpm-lock.yaml" ]; then
            log_info "Removing pnpm-lock.yaml"
            rm pnpm-lock.yaml
          fi
          
          # Clean node_modules for fresh npm install
          if [ -d "node_modules" ]; then
            log_info "Cleaning existing node_modules for npm conversion"
            rm -rf node_modules
          fi
          
          log_success "Project prepared for npm"
          
          # Step 6: Check runtime environment
          log_step "Verifying runtime environment"
          NODE_VERSION=$(node --version)
          NPM_VERSION=$(npm --version)
          log_info "Node.js: $NODE_VERSION"
          log_info "NPM: $NPM_VERSION"
          
          # Step 7: Install dependencies with npm
          log_step "Installing dependencies with npm"
          log_info "Using npm for package management"
          
          if [ -f "package-lock.json" ]; then
            log_info "Found package-lock.json, using npm ci"
            npm ci --only=production || {
              log_warning "npm ci failed, trying npm install"
              npm install --only=production || {
                log_error "Failed to install dependencies"
                exit 1
              }
            }
          else
            log_info "No package-lock.json found, using npm install"
            npm install --only=production || {
              log_error "Failed to install dependencies"
              exit 1
            }
          fi
          
          log_success "Dependencies installed successfully with npm"
          
          # Step 8: Generate Prisma client
          log_step "Generating Prisma database client"
          if [ -f "prisma/schema.prisma" ]; then
            npx prisma generate --schema=prisma/schema.prisma || {
              log_error "Failed to generate Prisma client"
              exit 1
            }
            log_success "Prisma client generated successfully"
          else
            log_warning "No Prisma schema found, skipping client generation"
          fi
          
          # Step 9: Apply database migrations
          log_step "Applying database migrations"
          if [ -d "prisma/migrations" ]; then
            log_info "Checking for pending migrations..."
            npx prisma migrate deploy --schema=prisma/schema.prisma || {
              log_error "Failed to apply database migrations"
              exit 1
            }
            log_success "Database migrations applied successfully"
          else
            log_warning "No migrations directory found, skipping"
          fi
          
          # Step 10: Build application
          log_step "Building application for production"
          npm run build || {
            log_error "Failed to build application"
            exit 1
          }
          
          if [ -d "dist" ]; then
            BUILD_SIZE=$(du -sh dist | cut -f1)
            log_success "Application built successfully (Size: $BUILD_SIZE)"
          else
            log_error "Build completed but no dist directory found"
            exit 1
          fi
          
          # Step 11: Application service management
          log_step "Managing application service with PM2"
          
          # Check if PM2 is installed
          if ! command -v pm2 &> /dev/null; then
            log_info "Installing PM2 globally"
            npm install -g pm2
          fi
          
          # Restart or start application
          if pm2 describe ${{ env.APP_NAME }} > /dev/null 2>&1; then
            log_info "Restarting existing application"
            pm2 restart ${{ env.APP_NAME }} || {
              log_error "Failed to restart application"
              exit 1
            }
          else
            log_info "Starting new application instance"
            if [ -f "ecosystem.config.js" ]; then
              pm2 start ecosystem.config.js || {
                log_error "Failed to start with ecosystem config"
                exit 1
              }
            else
              pm2 start dist/main.js --name ${{ env.APP_NAME }} || {
                log_error "Failed to start application"
                exit 1
              }
            fi
          fi
          
          # Step 12: Health check
          log_step "Performing health check"
          sleep 5
          
          if pm2 describe ${{ env.APP_NAME }} | grep -q "online"; then
            log_success "Application is running and healthy"
            pm2 list | grep ${{ env.APP_NAME }}
            
            # Test API if possible
            if command -v curl &> /dev/null; then
              if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
                log_success "API health check passed"
              elif curl -f -s http://localhost:3000/ > /dev/null 2>&1; then
                log_success "API is responding"
              else
                log_warning "API health check failed, but application is running"
              fi
            fi
          else
            log_error "Application health check failed"
            pm2 logs ${{ env.APP_NAME }} --lines 10
            exit 1
          fi
          
          # Step 13: Cleanup
          log_step "Cleaning up old backups"
          if [ -d "backups" ]; then
            cd backups
            if [ $(ls -1 | wc -l) -gt 5 ]; then
              ls -t | tail -n +6 | xargs rm -rf
              log_success "Old backups cleaned up"
            fi
            cd ..
          fi
          
          # Final summary
          log_header "DEPLOYMENT COMPLETED SUCCESSFULLY"
          log_success "Deployment finished at $(date '+%Y-%m-%d %H:%M:%S UTC')"
          log_success "Package Manager: npm (converted from pnpm)"
          log_success "Application: ${{ env.APP_NAME }}"
          log_success "Commit: $(git rev-parse --short HEAD)"
          log_success "Node.js: $NODE_VERSION"
          
          echo -e "\n${GREEN}════════════════════════════════════════════════════════════${NC}"
          echo -e "${GREEN}🎉 PRODUCTION DEPLOYMENT SUCCESSFUL! 🎉${NC}"
          echo -e "${GREEN}Your application is now running with npm! 🚀${NC}"
          echo -e "${GREEN}════════════════════════════════════════════════════════════${NC}\n"

  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    
    steps:
    - name: 📢 Notify Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Production deployment completed successfully!"
          echo "📦 Converted from pnpm to npm"
          echo "🚀 Application is live and running"
        else
          echo "❌ Production deployment failed!"
          echo "🔧 Check logs for troubleshooting"
          exit 1
        fi
