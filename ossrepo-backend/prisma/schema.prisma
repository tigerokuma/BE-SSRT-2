// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           String          @id @default(uuid())
  email             String          @unique
  name              String?
  created_at        DateTime        @default(now())
  userWatchlists    UserWatchlist[]
  email_confirmed   Boolean         @default(false)
  EmailConfirmation EmailConfirmation?

  @@map("users")
}

// NEW: Fast NPM package data (always available)
model NpmPackage {
  package_name String    @id
  description  String?
  version      String?
  downloads    Int?
  keywords     String[]
  license      String?
  npm_url      String?
  homepage     String?
  published_at DateTime?
  last_updated DateTime?
  maintainers  String[]
  risk_score   Float?
  repo_url     String? // Link to GitHub repo (no foreign key constraint)
  fetched_at   DateTime  @default(now())

  @@map("npm_packages")
}

// NEW: Detailed GitHub repository data (enriched separately)
model GitHubRepository {
  repo_url       String    @id
  repo_name      String? // e.g., "facebook/react"
  owner          String? // e.g., "facebook"
  stars          Int?
  forks          Int?
  contributors   Int?
  topics         String[] // GitHub topics/tags
  pushed_at      DateTime?
  created_at     DateTime?
  updated_at     DateTime?
  default_branch String?
  language       String? // Primary language
  fetched_at     DateTime  @default(now())

  @@map("github_repositories")
}

// EXISTING: Keep for backward compatibility during migration
model Package {
  package_id   String @id @default(uuid())
  package_name String @unique
  repo_url     String
  repo_name    String

  // Existing fields
  downloads    Int?
  last_updated DateTime?
  stars        Int?
  forks        Int? // ADD ONLY THIS LINE
  contributors Int?
  pushed_at    DateTime?
  risk_score   Float?
  fetched_at   DateTime?

  // NPM-style summary fields
  description  String?
  version      String?
  published_at DateTime?
  maintainers  String[]
  keywords     String[]
  npm_url      String?
  homepage     String?
  license      String?

  // Relations
  watchlists Watchlist[]
}

model Watchlist {
  watchlist_id                     String          @id @default(uuid())
  alert_cve_ids                    String[]
  updated_at                       DateTime?
  default_branch                   String?
  latest_commit_sha                String?
  commits_since_last_health_update Int?
  package_id                       String
  // New fields for background processing
  status                           String          @default("processing") // processing, ready, failed
  processing_started_at            DateTime?
  processing_completed_at          DateTime?
  last_error                       String?
  userWatchlistEntries             UserWatchlist[]
  package                          Package         @relation(fields: [package_id], references: [package_id])
}

model UserWatchlist {
  id           String     @id @default(uuid())
  user_id      String
  watchlist_id String
  added_at     DateTime   @default(now())
  alerts       String?
  notes        String?
  created_at   DateTime   @default(now())
  user         User       @relation(fields: [user_id], references: [user_id])
  watchlist    Watchlist  @relation(fields: [watchlist_id], references: [watchlist_id])
  slack        Slack?
  jira         Jira?
  emailTime    EmailTime?
  Alert        Alert[]

  @@index([user_id])
  @@index([watchlist_id])
}

model BuildTask {
  task_id      String         @id @default(uuid())
  repo_id      String
  status       String // e.g., 'queued', 'in_progress', 'completed', 'failed'
  logs         String[]
  created_at   DateTime       @default(now())
  started_at   DateTime?
  finished_at  DateTime?
  // Optionally add commit_id, assigned_to, retry_count, etc.
  commit_id    String?
  assigned_to  String?
  retry_count  Int            @default(0)
  BuildSubtask BuildSubtask[]
}

model BuildSubtask {
  subtask_id  String    @id @default(uuid())
  buildTask   BuildTask @relation(fields: [task_id], references: [task_id], onDelete: Cascade)
  task_id     String
  language    String // e.g., 'python', 'java', etc.
  step        String // e.g., 'parse', 'graph', 'save'
  status      String // e.g., 'pending', 'in_progress', 'completed', 'failed'
  message     String? // details, errors, etc.
  created_at  DateTime  @default(now())
  started_at  DateTime?
  finished_at DateTime?
}

model GraphExport {
  export_id  String    @id @default(uuid())
  repo_id    String
  format     String
  ready_time DateTime?
  s3_url     String?
  status     String
  actor      String?
  created_at DateTime  @default(now())
}

enum Risk {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  REVIEWED
  CLOSED
}

model Alert {
  alert_id         String
  id               String
  risk             Risk
  status           Status
  created_at       DateTime      @default(now())
  title            String
  description      String
  userWatchlist    UserWatchlist @relation(fields: [id], references: [id])

  @@id([id, alert_id])
}

enum WaitValue {
  DAY
  WEEK
  MONTH
  YEAR
}

model EmailTime {
  id              String        @id @default(uuid())
  last_email_time DateTime
  job_id          String
  wait_value      WaitValue
  wait_unit       Int
  userWatchlist   UserWatchlist @relation(fields: [id], references: [id])
}

model EmailConfirmation {
  token     String    @id @default(uuid())
  user_id   String    @unique
  expires_at DateTime
  created_at DateTime @default(now())
  user      User      @relation(fields: [user_id], references: [user_id])

  @@index([expires_at])
}

model Slack {
  id            String        @id @default(uuid())
  slack_token   String
  slack_channel String?
  userWatchlist UserWatchlist @relation(fields: [id], references: [id])
}

model Jira {
  id             String        @id @default(uuid())
  webtrigger_url String
  project_key    String?
  userWatchlist  UserWatchlist @relation(fields: [id], references: [id])
}