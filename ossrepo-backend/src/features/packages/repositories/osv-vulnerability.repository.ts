import { Injectable } from '@nestjs/common';
import { OsvVulnerability } from 'generated/prisma';
import { PrismaService } from 'src/common/prisma/prisma.service';

@Injectable()
export class OsvVulnerabilityRepository {
  constructor(private readonly prisma: PrismaService) {}

  async findByPackageName(packageName: string): Promise<OsvVulnerability[]> {
    return this.prisma.osvVulnerability.findMany({
      where: { package_name: packageName },
      orderBy: { published: 'desc' }
    });
  }

  async createOrUpdateMany(vulnerabilities: Array<{
    id: string;
    package_name: string;
    summary: string;
    severity?: string;
    details?: string;
    affected?: any;
    references?: any;
    published?: Date;
    modified?: Date;
  }>): Promise<OsvVulnerability[]> {
    const results: OsvVulnerability[] = [];
    
    for (const vuln of vulnerabilities) {
      const result = await this.prisma.osvVulnerability.upsert({
        where: { 
          id: vuln.id 
        },
        update: {
          summary: vuln.summary,
          severity: vuln.severity,
          details: vuln.details,
          affected: vuln.affected,
          references: vuln.references,
          published: vuln.published,
          modified: vuln.modified
        },
        create: {
          id: vuln.id,
          package_name: vuln.package_name,
          summary: vuln.summary,
          severity: vuln.severity,
          details: vuln.details,
          affected: vuln.affected,
          references: vuln.references,
          published: vuln.published,
          modified: vuln.modified
        }
      });
      results.push(result);
    }
    
    return results;
  }

  async deleteByPackageName(packageName: string): Promise<void> {
    await this.prisma.osvVulnerability.deleteMany({
      where: { package_name: packageName }
    });
  }

  async countByPackageName(packageName: string): Promise<number> {
    return this.prisma.osvVulnerability.count({
      where: { package_name: packageName }
    });
  }
}
