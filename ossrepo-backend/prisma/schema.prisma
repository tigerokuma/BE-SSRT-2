generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           String             @id @default(uuid())
  email             String             @unique
  name              String?
  created_at        DateTime           @default(now())
  email_confirmed   Boolean            @default(false)
  EmailConfirmation EmailConfirmation?
  userWatchlists    UserWatchlist[]

  @@map("users")
}

model NpmPackage {
  package_name String    @id
  description  String?
  version      String?
  downloads    Int?
  keywords     String[]
  license      String?
  npm_url      String?
  homepage     String?
  published_at DateTime?
  last_updated DateTime?
  maintainers  String[]
  risk_score   Float?
  repo_url     String?
  fetched_at   DateTime  @default(now())

  @@map("npm_packages")
}

model GitHubRepository {
  repo_url       String    @id
  repo_name      String?
  owner          String?
  stars          Int?
  forks          Int?
  contributors   Int?
  topics         String[]
  pushed_at      DateTime?
  created_at     DateTime?
  updated_at     DateTime?
  default_branch String?
  language       String?
  fetched_at     DateTime  @default(now())

  @@map("github_repositories")
}

model Package {
  package_name String      @unique
  downloads    Int?
  last_updated DateTime?
  stars        Int?
  contributors Int?
  pushed_at    DateTime?
  risk_score   Float?
  fetched_at   DateTime?
  repo_url     String
  repo_name    String
  package_id   String      @id @default(uuid())
  description  String?
  homepage     String?
  keywords     String[]
  license      String?
  maintainers  String[]
  npm_url      String?
  published_at DateTime?
  version      String?
  forks        Int?
  watchlists   Watchlist[]
}

model Watchlist {
  watchlist_id                     String              @id @default(uuid())
  alert_cve_ids                    String[]
  updated_at                       DateTime?
  default_branch                   String?
  latest_commit_sha                String?
  commits_since_last_health_update Int                 @default(0)
  package_id                       String
  last_error                       String?
  processing_completed_at          DateTime?
  processing_started_at            DateTime?
  status                           String              @default("processing")
  analysis_strategy                String?             @default("api-only")
  clone_time_ms                    Int?
  repo_size_kb                     Int?
  userWatchlistEntries             UserWatchlist[]
  package                          Package             @relation(fields: [package_id], references: [package_id])
  activityData                     ActivityData[]
  aiSummaryData                    AISummaryData[]
  busFactorData                    BusFactorData[]
  healthData                       HealthData[]
  logs                             Log[]
  weeklySummaryData                WeeklySummaryData[]
  contributorStats                 ContributorStats[]
  repoStats                        RepoStats?
}

model UserWatchlist {
  id           String     @id @default(uuid())
  user_id      String
  watchlist_id String
  added_at     DateTime   @default(now())
  alerts       String?
  notes        String?
  created_at   DateTime   @default(now())
  Alert        Alert[]
  emailTime    EmailTime?
  jira         Jira?
  slack        Slack?
  user         User       @relation(fields: [user_id], references: [user_id])
  watchlist    Watchlist  @relation(fields: [watchlist_id], references: [watchlist_id])

  @@index([user_id])
  @@index([watchlist_id])
}

model HealthData {
  id                   String    @id @default(uuid())
  watchlist_id         String
  commit_sha           String?
  commit_date          DateTime?
  scorecard_metrics    Json?
  overall_health_score Decimal?  @db.Decimal(5, 2)
  analysis_date        DateTime  @default(now())
  source               String    @default("scorecard")
  created_at           DateTime  @default(now())
  watchlist            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@index([commit_sha])
  @@map("health_data")
}

model BusFactorData {
  id                 String    @id @default(uuid())
  watchlist_id       String
  bus_factor         Int
  total_contributors Int
  top_contributors   Json
  risk_level         String
  risk_reason        String?
  analysis_date      DateTime  @default(now())
  created_at         DateTime  @default(now())
  watchlist          Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("bus_factor_data")
}

model ActivityData {
  id                   String    @id @default(uuid())
  watchlist_id         String
  activity_score       Int
  activity_level       String
  weekly_commit_rate   Decimal   @db.Decimal(5, 2) // Average commits per week (e.g., 2.50)
  total_files_analyzed Int
  file_churn_data      Json?
  activity_heatmap     Json?
  peak_activity        Json?
  analysis_date        DateTime  @default(now())
  created_at           DateTime  @default(now())
  watchlist            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("activity_data")
}

model AISummaryData {
  id                 String    @id @default(uuid())
  watchlist_id       String
  summary            String
  confidence         Float     @default(1.0)
  model_used         String    @default("gemma2:2b")
  prompt_length      Int?
  output_length      Int?
  generation_time_ms Int?
  created_at         DateTime  @default(now())
  watchlist          Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("ai_summary_data")
}

model WeeklySummaryData {
  id              String    @id @default(uuid())
  watchlist_id    String
  week_start      DateTime
  week_end        DateTime
  summary         String
  confidence      Float     @default(1.0)
  model_used      String    @default("gemma2:2b")
  metrics_summary Json?
  created_at      DateTime  @default(now())
  watchlist       Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id, week_start])
  @@index([watchlist_id])
  @@index([week_start])
  @@map("weekly_summary_data")
}

model BuildTask {
  task_id      String         @id @default(uuid())
  repo_id      String
  status       String
  logs         String[]
  created_at   DateTime       @default(now())
  started_at   DateTime?
  finished_at  DateTime?
  commit_id    String?
  assigned_to  String?
  retry_count  Int            @default(0)
  BuildSubtask BuildSubtask[]
}

model BuildSubtask {
  subtask_id    String          @id @default(uuid())
  task_id       String
  language      String
  step          String
  status        String
  message       String?
  created_at    DateTime        @default(now())
  started_at    DateTime?
  finished_at   DateTime?
  buildTask     BuildTask       @relation(fields: [task_id], references: [task_id], onDelete: Cascade)
  GraphSnapshot GraphSnapshot[]
}

model GraphExport {
  export_id  String    @id @default(uuid())
  repo_id    String
  format     String
  ready_time DateTime?
  s3_url     String?
  status     String
  actor      String?
  created_at DateTime  @default(now())
}

model Alert {
  alert_id      String
  id            String
  risk          Risk
  status        Status
  created_at    DateTime      @default(now())
  title         String
  description   String
  userWatchlist UserWatchlist @relation(fields: [id], references: [id])

  @@id([id, alert_id])
}

model EmailTime {
  id              String        @id @default(uuid())
  last_email_time DateTime
  job_id          String
  wait_value      WaitValue
  wait_unit       Int
  userWatchlist   UserWatchlist @relation(fields: [id], references: [id])
}

model EmailConfirmation {
  token      String   @id @default(uuid())
  user_id    String   @unique
  created_at DateTime @default(now())
  expires_at DateTime
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([expires_at])
}

model Slack {
  id            String        @id @default(uuid())
  slack_token   String
  slack_channel String?
  userWatchlist UserWatchlist @relation(fields: [id], references: [id])
}

model Jira {
  id             String        @id @default(uuid())
  webtrigger_url String
  project_key    String?
  userWatchlist  UserWatchlist @relation(fields: [id], references: [id])
}

model GraphSnapshot {
  snapshot_id  String       @id @default(uuid())
  subtask_id   String
  repo_id      String
  commit_id    String?
  language     String
  graph_type   String
  version      Int
  created_at   DateTime     @default(now())
  node_count   Int?
  edge_count   Int?
  s3_url       String?
  status       String
  edges        GraphEdge[]
  nodes        GraphNode[]
  buildSubtask BuildSubtask @relation(fields: [subtask_id], references: [subtask_id], onDelete: Cascade)

  @@index([subtask_id])
  @@index([repo_id])
  @@map("graph_snapshots")
}

model GraphNode {
  node_id     String        @id @default(uuid())
  snapshot_id String
  type        String
  name        String?
  file_path   String?
  commit_id   String?
  metadata    Json?
  outgoing    GraphEdge[]   @relation("EdgeSource")
  incoming    GraphEdge[]   @relation("EdgeTarget")
  snapshot    GraphSnapshot @relation(fields: [snapshot_id], references: [snapshot_id], onDelete: Cascade)

  @@index([snapshot_id])
  @@index([name])
  @@map("graph_nodes")
}

model GraphEdge {
  edge_id     String        @id @default(uuid())
  snapshot_id String
  source_id   String
  target_id   String
  relation    String
  metadata    Json?
  snapshot    GraphSnapshot @relation(fields: [snapshot_id], references: [snapshot_id], onDelete: Cascade)
  source      GraphNode     @relation("EdgeSource", fields: [source_id], references: [node_id])
  target      GraphNode     @relation("EdgeTarget", fields: [target_id], references: [node_id])

  @@index([relation])
  @@map("graph_edges")
}

model Log {
  event_id        String     @id @default(uuid())
  watchlist_id    String?
  event_type      String
  actor           String
  timestamp       DateTime
  payload         Json?
  event_hash      String
  prev_event_hash String?
  diff_data       Json?
  files_changed   Int?       @default(0)
  lines_added     Int?       @default(0)
  lines_deleted   Int?       @default(0)
  repository      Watchlist? @relation(fields: [watchlist_id], references: [watchlist_id])

  @@index([watchlist_id])
  @@index([event_type])
  @@index([timestamp])
  @@map("logs")
}

model ContributorStats {
  id                    String    @id @default(uuid())
  watchlist_id          String
  author_email          String
  author_name           String?
  total_commits         Int
  avg_lines_added       Float
  avg_lines_deleted     Float
  avg_files_changed     Float
  commit_time_histogram Json
  last_commit_date      DateTime
  stddev_lines_added    Float
  stddev_lines_deleted  Float
  stddev_files_changed  Float
  typical_days_active   Json
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  repository            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id, author_email])
  @@index([watchlist_id])
  @@map("contributor_stats")
}

model RepoStats {
  id                    String    @id @default(uuid())
  watchlist_id          String
  total_commits         Int
  avg_lines_added       Float
  avg_lines_deleted     Float
  avg_files_changed     Float
  stddev_lines_added    Float
  stddev_lines_deleted  Float
  stddev_files_changed  Float
  commit_time_histogram Json
  typical_days_active   Json
  last_updated          DateTime  @default(now())
  created_at            DateTime  @default(now())

  repository            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id])
  @@index([watchlist_id])
  @@map("repo_stats")
}

enum Risk {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  REVIEWED
  CLOSED
}

enum WaitValue {
  DAY
  WEEK
  MONTH
  YEAR
}
