generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id                   String                    @id @default(uuid())
  email                     String                    @unique
  clerk_id                  String?                   @unique
  name                      String?
  created_at                DateTime                  @default(now())
  email_confirmed           Boolean                   @default(false)
  access_token              String?
  github_id                 String?                   @unique
  github_username           String?
  last_login                DateTime?
  refresh_token             String?
  EmailConfirmation         EmailConfirmation?
  emailTime                 EmailTime?
  jira                      Jira?
  slack                     Slack?
  userWatchlists            UserWatchlist[]
  sbom                      UserWatchlistSbom?
  projectUsers              ProjectUser[]
  addedWatchlistPackages    ProjectWatchlistPackage[]
  approvedWatchlistPackages ProjectWatchlistPackage[] @relation("ApprovedByUser")
  rejectedWatchlistPackages ProjectWatchlistPackage[] @relation("RejectedByUser")
  watchlistComments         WatchlistComment[]

  @@map("users")
}

model NpmPackage {
  package_name           String             @id
  description            String?
  version                String?
  downloads              Int?
  keywords               String[]
  license                String?
  npm_url                String?
  homepage               String?
  published_at           DateTime?
  last_updated           DateTime?
  maintainers            String[]
  risk_score             Float?
  repo_url               String?
  fetched_at             DateTime           @default(now())
  has_osvvulnerabilities Boolean            @default(false)
  osvVulnerabilities     OsvVulnerability[]

  @@map("npm_packages")
}

model OsvVulnerability {
  id                     String     @id
  package_name           String
  summary                String
  severity               String?
  details                String?
  affected               Json?
  references             Json?
  published              DateTime?
  modified               DateTime?
  fixed_versions         Json?
  introduced_versions    Json?
  is_patched             Boolean    @default(false)
  last_affected_versions Json?
  patch_age_days         Int?
  npmPackage             NpmPackage @relation(fields: [package_name], references: [package_name])

  @@index([package_name])
  @@index([is_patched])
  @@index([patch_age_days])
  @@index([published])
  @@map("osv_vulnerabilities")
}

model GitHubRepository {
  repo_url       String    @id
  repo_name      String?
  owner          String?
  stars          Int?
  forks          Int?
  contributors   Int?
  topics         String[]
  pushed_at      DateTime?
  created_at     DateTime?
  updated_at     DateTime?
  default_branch String?
  language       String?
  fetched_at     DateTime  @default(now())

  @@map("github_repositories")
}

model Package {
  package_name         String                 @unique
  downloads            Int?
  last_updated         DateTime?
  stars                Int?
  contributors         Int?
  pushed_at            DateTime?
  risk_score           Float?
  fetched_at           DateTime?
  repo_url             String
  repo_name            String
  package_id           String                 @id @default(uuid())
  description          String?
  homepage             String?
  keywords             String[]
  license              String?
  maintainers          String[]
  npm_url              String?
  published_at         DateTime?
  version              String?
  forks                Int?
  watchlists           Watchlist[]
  project_dependencies project_dependencies[]
}

// NEW: Packages table for optimized dependency tracking
model Packages {
  id       String  @id @default(uuid())
  name     String  @unique
  repo_url String?
  npm_url  String? // NPM package URL
  license  String? // Package license (e.g., "MIT", "Apache-2.0", "GPL-3.0")

  // Processing status
  status String @default("queued") // queued, fast, done

  // Health scores
  activity_score      Float?
  bus_factor_score    Float?
  scorecard_score     Float?
  vulnerability_score Float?
  license_score       Float?
  total_score         Float?

  // Metadata
  stars        Int?
  contributors Int?
  downloads    Int? // NPM download count
  summary      String? // AI-generated summary

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  projectWatchlist    ProjectWatchlistPackage[]
  branchDependencies  BranchDependency[]
  commits             PackageCommit[]
  packageContributors PackageContributor[]
  scorecardHistory    PackageScorecardHistory[]
  versions            PackageVersion[]
  monthlyCommits      PackageMonthlyCommits[]
}

model PackageCommit {
  id            String   @id @default(uuid())
  package_id    String
  sha           String
  author        String
  author_email  String
  message       String
  timestamp     DateTime
  lines_added   Int      @default(0)
  lines_deleted Int      @default(0)
  files_changed Int      @default(0)
  diff_data     Json?
  created_at    DateTime @default(now())

  package Packages @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@unique([package_id, sha])
  @@index([package_id])
  @@index([timestamp])
  @@map("package_commits")
}

model PackageContributor {
  id                    String   @id @default(uuid())
  package_id            String
  author_email          String
  author_name           String?
  total_commits         Int
  avg_lines_added       Float
  avg_lines_deleted     Float
  avg_files_changed     Float
  stddev_lines_added    Float
  stddev_lines_deleted  Float
  stddev_files_changed  Float
  commit_time_histogram Json
  typical_days_active   Json
  files_worked_on       Json // Histogram of files the contributor has worked on
  first_commit_date     DateTime
  last_commit_date      DateTime
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  package Packages @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@unique([package_id, author_email])
  @@index([package_id])
  @@map("package_contributors")
}

model PackageScorecardHistory {
  id             String   @id @default(uuid())
  package_id     String
  commit_sha     String
  commit_date    DateTime @default(now()) // Date of the actual commit
  score          Float
  scorecard_data Json
  source         String // 'api' or 'local'
  analyzed_at    DateTime @default(now())

  package Packages @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@index([package_id])
  @@index([commit_sha])
  @@index([commit_date])
  @@map("package_scorecard_history")
}

model PackageVersion {
  id                    String   @id @default(uuid())
  package_id            String
  version               String
  release_date          DateTime
  vulnerability_count   Int      @default(0)
  critical_count        Int      @default(0)
  high_count            Int      @default(0)
  medium_count          Int      @default(0)
  low_count             Int      @default(0)
  last_checked          DateTime @default(now())
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  package Packages @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@unique([package_id, version])
  @@index([package_id])
  @@index([version])
  @@index([release_date])
  @@map("package_versions")
}

model PackageMonthlyCommits {
  id           String   @id @default(uuid())
  package_id   String
  year         Int
  month        Int      // 1-12
  commit_count Int      @default(0)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  package Packages @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@unique([package_id, year, month])
  @@index([package_id])
  @@index([year, month])
  @@map("package_monthly_commits")
}

model Watchlist {
  watchlist_id                     String                @id @default(uuid())
  alert_cve_ids                    String[]
  updated_at                       DateTime?
  default_branch                   String?
  latest_commit_sha                String?
  commits_since_last_health_update Int                   @default(0)
  package_id                       String
  last_error                       String?
  processing_completed_at          DateTime?
  processing_started_at            DateTime?
  status                           String                @default("processing")
  analysis_strategy                String?               @default("api-only")
  clone_time_ms                    Int?
  repo_size_kb                     Int?
  userWatchlistEntries             UserWatchlist[]
  package                          Package               @relation(fields: [package_id], references: [package_id])
  sbom                             WatchlistSbom?
  activityData                     ActivityData[]
  aiAnomaliesDetected              AIAnomaliesDetected[]
  aiSummaryData                    AISummaryData[]
  alertTriggered                   AlertTriggered[]
  busFactorData                    BusFactorData[]
  contributorStats                 ContributorStats[]
  healthData                       HealthData[]
  logs                             Log[]
  repoStats                        RepoStats?
  vulnerabilities                  Vulnerability[]
  vulnerabilitySummary             VulnerabilitySummary?
  weeklySummaryData                WeeklySummaryData[]
}

model UserWatchlist {
  id             String           @id @default(uuid())
  user_id        String
  watchlist_id   String
  added_at       DateTime         @default(now())
  alerts         String?
  notes          String?
  created_at     DateTime         @default(now())
  user           User             @relation(fields: [user_id], references: [user_id])
  watchlist      Watchlist        @relation(fields: [watchlist_id], references: [watchlist_id])
  AlertTriggered AlertTriggered[]

  @@index([user_id])
  @@index([watchlist_id])
}

model HealthData {
  id                   String    @id @default(uuid())
  watchlist_id         String
  commit_sha           String?
  commit_date          DateTime?
  scorecard_metrics    Json?
  overall_health_score Decimal?  @db.Decimal(5, 2)
  analysis_date        DateTime  @default(now())
  source               String    @default("scorecard")
  created_at           DateTime  @default(now())
  watchlist            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@index([commit_sha])
  @@map("health_data")
}

model BusFactorData {
  id                 String    @id @default(uuid())
  watchlist_id       String
  bus_factor         Int
  total_contributors Int
  top_contributors   Json
  risk_level         String
  risk_reason        String?
  analysis_date      DateTime  @default(now())
  created_at         DateTime  @default(now())
  total_commits      Int
  watchlist          Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("bus_factor_data")
}

model ActivityData {
  id                 String    @id @default(uuid())
  watchlist_id       String
  activity_score     Int
  activity_level     String
  activity_heatmap   Json?
  peak_activity      Json?
  analysis_date      DateTime  @default(now())
  created_at         DateTime  @default(now())
  weekly_commit_rate Decimal   @db.Decimal(5, 2)
  activity_factors   Json
  watchlist          Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("activity_data")
}

model AISummaryData {
  id                 String    @id @default(uuid())
  watchlist_id       String
  summary            String
  confidence         Float     @default(1.0)
  model_used         String    @default("gemma2:2b")
  prompt_length      Int?
  output_length      Int?
  generation_time_ms Int?
  created_at         DateTime  @default(now())
  watchlist          Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("ai_summary_data")
}

model WeeklySummaryData {
  id              String    @id @default(uuid())
  watchlist_id    String
  week_start      DateTime
  week_end        DateTime
  summary         String
  confidence      Float     @default(1.0)
  model_used      String    @default("gemma2:2b")
  metrics_summary Json?
  created_at      DateTime  @default(now())
  watchlist       Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id, week_start])
  @@index([watchlist_id])
  @@index([week_start])
  @@map("weekly_summary_data")
}

model BuildTask {
  task_id      String         @id @default(uuid())
  repo_id      String
  status       String
  logs         String[]
  created_at   DateTime       @default(now())
  started_at   DateTime?
  finished_at  DateTime?
  commit_id    String?
  assigned_to  String?
  retry_count  Int            @default(0)
  BuildSubtask BuildSubtask[]
}

model BuildSubtask {
  subtask_id    String          @id @default(uuid())
  task_id       String
  language      String
  step          String
  status        String
  message       String?
  created_at    DateTime        @default(now())
  started_at    DateTime?
  finished_at   DateTime?
  buildTask     BuildTask       @relation(fields: [task_id], references: [task_id], onDelete: Cascade)
  GraphSnapshot GraphSnapshot[]
}

model GraphExport {
  export_id  String    @id @default(uuid())
  repo_id    String
  format     String
  ready_time DateTime?
  s3_url     String?
  status     String
  actor      String?
  created_at DateTime  @default(now())
}

model AlertTriggered {
  id                String        @id @default(uuid())
  user_watchlist_id String
  watchlist_id      String
  commit_sha        String
  contributor       String
  metric            String
  value             Float
  alert_level       String
  threshold_type    String
  threshold_value   Float
  description       String
  details_json      Json?
  created_at        DateTime      @default(now())
  acknowledged_at   DateTime?
  resolved_at       DateTime?
  userWatchlist     UserWatchlist @relation(fields: [user_watchlist_id], references: [id], onDelete: Cascade)
  watchlist         Watchlist     @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([user_watchlist_id])
  @@index([watchlist_id])
  @@index([commit_sha])
  @@index([created_at])
  @@map("alert_triggered")
}

model EmailTime {
  id              String    @id @default(uuid())
  last_email_time DateTime
  wait_value      WaitValue
  wait_unit       Int
  next_email_time DateTime
  user            User      @relation(fields: [id], references: [user_id])
}

model EmailConfirmation {
  token      String   @id @default(uuid())
  user_id    String   @unique
  created_at DateTime @default(now())
  expires_at DateTime
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([expires_at])
}

model Slack {
  id            String  @id @default(uuid())
  slack_token   String
  slack_channel String?
  user          User    @relation(fields: [id], references: [user_id])
}

model Jira {
  id             String  @id @default(uuid())
  webtrigger_url String
  project_key    String?
  user           User    @relation(fields: [id], references: [user_id])
}

model GraphSnapshot {
  snapshot_id  String       @id @default(uuid())
  subtask_id   String
  repo_id      String
  commit_id    String?
  language     String
  graph_type   String
  version      Int
  created_at   DateTime     @default(now())
  node_count   Int?
  edge_count   Int?
  s3_url       String?
  status       String
  edges        GraphEdge[]
  nodes        GraphNode[]
  buildSubtask BuildSubtask @relation(fields: [subtask_id], references: [subtask_id], onDelete: Cascade)

  @@index([subtask_id])
  @@index([repo_id])
  @@map("graph_snapshots")
}

model GraphNode {
  node_id     String        @id @default(uuid())
  snapshot_id String
  type        String
  name        String?
  file_path   String?
  commit_id   String?
  metadata    Json?
  outgoing    GraphEdge[]   @relation("EdgeSource")
  incoming    GraphEdge[]   @relation("EdgeTarget")
  snapshot    GraphSnapshot @relation(fields: [snapshot_id], references: [snapshot_id], onDelete: Cascade)

  @@index([snapshot_id])
  @@index([name])
  @@map("graph_nodes")
}

model GraphEdge {
  edge_id     String        @id @default(uuid())
  snapshot_id String
  source_id   String
  target_id   String
  relation    String
  metadata    Json?
  snapshot    GraphSnapshot @relation(fields: [snapshot_id], references: [snapshot_id], onDelete: Cascade)
  source      GraphNode     @relation("EdgeSource", fields: [source_id], references: [node_id])
  target      GraphNode     @relation("EdgeTarget", fields: [target_id], references: [node_id])

  @@index([relation])
  @@map("graph_edges")
}

model Log {
  event_id        String     @id @default(uuid())
  watchlist_id    String?
  event_type      String
  actor           String
  timestamp       DateTime
  payload         Json?
  event_hash      String
  prev_event_hash String?
  diff_data       Json?
  files_changed   Int?       @default(0)
  lines_added     Int?       @default(0)
  lines_deleted   Int?       @default(0)
  repository      Watchlist? @relation(fields: [watchlist_id], references: [watchlist_id])

  @@index([watchlist_id])
  @@index([event_type])
  @@index([timestamp])
  @@map("logs")
}

model ContributorStats {
  id                    String    @id @default(uuid())
  watchlist_id          String
  author_email          String
  author_name           String?
  total_commits         Int
  avg_lines_added       Float
  avg_lines_deleted     Float
  avg_files_changed     Float
  commit_time_histogram Json
  last_commit_date      DateTime
  stddev_lines_added    Float
  stddev_lines_deleted  Float
  stddev_files_changed  Float
  typical_days_active   Json
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  repository            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id, author_email])
  @@index([watchlist_id])
  @@map("contributor_stats")
}

model RepoStats {
  id                    String    @id @default(uuid())
  watchlist_id          String    @unique
  total_commits         Int
  avg_lines_added       Float
  avg_lines_deleted     Float
  avg_files_changed     Float
  stddev_lines_added    Float
  stddev_lines_deleted  Float
  stddev_files_changed  Float
  commit_time_histogram Json
  typical_days_active   Json
  last_updated          DateTime  @default(now())
  created_at            DateTime  @default(now())
  repository            Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("repo_stats")
}

model TempJira {
  code           String   @unique
  project_key    String
  webtrigger_url String
  expires_at     DateTime

  @@unique([webtrigger_url, project_key])
}

model WatchlistSbom {
  id           String    @id @default(uuid())
  watchlist_id String    @unique
  sbom         Json
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  watchlist    Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
}

model UserWatchlistSbom {
  id         String   @id @default(uuid())
  user_id    String   @unique
  sbom       Json
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model AIAnomaliesDetected {
  id              String    @id @default(uuid())
  watchlist_id    String
  commit_sha      String
  anomaly_details Json
  detected_at     DateTime  @default(now())
  repository      Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@unique([watchlist_id, commit_sha])
  @@index([watchlist_id])
  @@index([commit_sha])
  @@map("ai_anomalies_detected")
}

model Vulnerability {
  id                String    @id @default(uuid())
  watchlist_id      String
  title             String
  description       String
  severity          String
  cve_id            String?
  ghsa_id           String?
  published_date    DateTime
  affected_versions String[]
  fixed_versions    String[]
  references        Json
  created_at        DateTime  @default(now())
  watchlist         Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@index([severity])
  @@index([published_date])
  @@map("vulnerabilities")
}

model VulnerabilitySummary {
  id             String    @id @default(uuid())
  watchlist_id   String    @unique
  total_count    Int       @default(0)
  critical_count Int       @default(0)
  high_count     Int       @default(0)
  medium_count   Int       @default(0)
  low_count      Int       @default(0)
  last_updated   DateTime  @default(now())
  watchlist      Watchlist @relation(fields: [watchlist_id], references: [watchlist_id], onDelete: Cascade)

  @@index([watchlist_id])
  @@map("vulnerability_summaries")
}

model Project {
  id                          String                    @id @default(uuid())
  name                        String
  created_at                  DateTime                  @default(now())
  updated_at                  DateTime                  @updatedAt
  description                 String?
  monitored_branch_id         String?
  error_message               String?
  status                      String                    @default("creating")
  language                    String?
  type                        String
  license                     String?
  vulnerability_notifications Json?
  license_notifications       Json?
  health_notifications        Json?
  health_score                Float?
  dependencies_json           Json?
  project_dependencies        project_dependencies[]
  projectUsers                ProjectUser[]
  projectWatchlistPackages    ProjectWatchlistPackage[]
  monitoredBranch             MonitoredBranch?          @relation(fields: [monitored_branch_id], references: [id])

  @@map("projects")
}

model MonitoredBranch {
  id                   String                 @id @default(uuid())
  branch_name          String
  is_active            Boolean                @default(true)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  repository_url       String
  webhook_id           String?
  dependencies         BranchDependency[]
  project_dependencies project_dependencies[]
  projects             Project[]

  @@unique([repository_url, branch_name])
  @@index([repository_url])
  @@index([branch_name])
  @@index([is_active])
  @@map("monitored_branches")
}

model ProjectUser {
  id         String   @id @default(uuid())
  project_id String
  user_id    String
  role       String?
  joined_at  DateTime @default(now())
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([project_id, user_id])
  @@index([project_id])
  @@index([user_id])
  @@map("project_users")
}

model BranchDependency {
  id                  String          @id @default(uuid())
  monitored_branch_id String
  name                String
  version             String
  package_id          String?
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  monitoredBranch     MonitoredBranch @relation(fields: [monitored_branch_id], references: [id], onDelete: Cascade)
  package             Packages?       @relation(fields: [package_id], references: [id])

  @@unique([monitored_branch_id, name])
  @@index([monitored_branch_id])
  @@index([package_id])
  @@map("branch_dependencies")
}

// REMOVED: ProjectWatchlist table - replaced with direct Project → Packages relationship

// NEW: ProjectWatchlistPackage - links projects directly to packages
model ProjectWatchlistPackage {
  id          String    @id @default(uuid())
  project_id  String
  package_id  String
  added_at    DateTime  @default(now())
  added_by    String // User ID of who added the package
  status      String    @default("pending") // pending, approved, rejected
  approved_by String? // User ID of who approved the package
  rejected_by String? // User ID of who rejected the package
  approved_at DateTime? // When the package was approved
  rejected_at DateTime? // When the package was rejected

  // Relations
  project        Project            @relation(fields: [project_id], references: [id], onDelete: Cascade)
  package        Packages           @relation(fields: [package_id], references: [id], onDelete: Cascade)
  addedByUser    User               @relation(fields: [added_by], references: [user_id], onDelete: Cascade)
  approvedByUser User?              @relation("ApprovedByUser", fields: [approved_by], references: [user_id], onDelete: SetNull)
  rejectedByUser User?              @relation("RejectedByUser", fields: [rejected_by], references: [user_id], onDelete: SetNull)
  comments       WatchlistComment[]

  @@unique([project_id, package_id])
  @@index([project_id])
  @@index([package_id])
  @@map("project_watchlist_packages")
}

// WatchlistComment - comments on watchlisted packages
model WatchlistComment {
  id                           String   @id @default(uuid())
  project_watchlist_package_id String
  user_id                      String
  comment                      String
  created_at                   DateTime @default(now())

  // Relations
  projectWatchlistPackage ProjectWatchlistPackage @relation(fields: [project_watchlist_package_id], references: [id], onDelete: Cascade)
  user                    User                    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([project_watchlist_package_id])
  @@map("watchlist_comments")
}

// REMOVED: Old watchlist approval/comment tables - replaced with ProjectWatchlistPackage

model project_dependencies {
  id                  String           @id
  project_id          String
  name                String
  version             String
  source_type         String
  monitored_branch_id String?
  repo_url            String?
  repo_owner          String?
  repo_name           String?
  package_id          String?
  status              String           @default("queued")
  setup_type          String           @default("fast")
  activity_score      Float?
  bus_factor_score    Float?
  health_score        Float?
  scorecard_score     Float?
  vulnerability_count Int              @default(0)
  license_compliant   Boolean?
  github_stars        Int?
  contributors_count  Int?
  last_commit_date    DateTime?
  summary             String?
  created_at          DateTime         @default(now())
  updated_at          DateTime
  last_analyzed_at    DateTime?
  monitored_branches  MonitoredBranch? @relation(fields: [monitored_branch_id], references: [id], onDelete: Cascade)
  Package             Package?         @relation(fields: [package_id], references: [package_id])
  projects            Project          @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@unique([project_id, name])
  @@index([monitored_branch_id])
  @@index([package_id])
  @@index([project_id])
  @@index([status])
}

enum WaitValue {
  DAY
  WEEK
  MONTH
  YEAR
}
