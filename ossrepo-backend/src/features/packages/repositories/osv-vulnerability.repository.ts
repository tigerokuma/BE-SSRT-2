import { Injectable } from '@nestjs/common';
import { OsvVulnerability } from 'generated/prisma';
import { PrismaService } from 'src/common/prisma/prisma.service';

@Injectable()
export class OsvVulnerabilityRepository {
  constructor(private readonly prisma: PrismaService) {}

  async findByPackageName(packageName: string): Promise<OsvVulnerability[]> {
    return this.prisma.osvVulnerability.findMany({
      where: { package_name: packageName },
      orderBy: { published: 'desc' }
    });
  }

  async createOrUpdateMany(vulnerabilities: Array<{
    id: string;
    package_name: string;
    summary: string;
    severity?: string;
    details?: string;
    affected?: any;
    references?: any;
    published?: Date;
    modified?: Date;
    fixed_versions?: string[];
    introduced_versions?: string[];
    last_affected_versions?: string[];
    is_patched?: boolean;
    patch_age_days?: number;
  }>): Promise<OsvVulnerability[]> {
    const results: OsvVulnerability[] = [];
    
    for (const vuln of vulnerabilities) {
      const result = await this.prisma.osvVulnerability.upsert({
        where: { 
          id: vuln.id 
        },
        update: {
          summary: vuln.summary,
          severity: vuln.severity,
          details: vuln.details,
          affected: vuln.affected,
          references: vuln.references,
          published: vuln.published,
          modified: vuln.modified,
          fixed_versions: vuln.fixed_versions,
          introduced_versions: vuln.introduced_versions,
          last_affected_versions: vuln.last_affected_versions,
          is_patched: vuln.is_patched ?? false,
          patch_age_days: vuln.patch_age_days
        },
        create: {
          id: vuln.id,
          package_name: vuln.package_name,
          summary: vuln.summary,
          severity: vuln.severity,
          details: vuln.details,
          affected: vuln.affected,
          references: vuln.references,
          published: vuln.published,
          modified: vuln.modified,
          fixed_versions: vuln.fixed_versions,
          introduced_versions: vuln.introduced_versions,
          last_affected_versions: vuln.last_affected_versions,
          is_patched: vuln.is_patched ?? false,
          patch_age_days: vuln.patch_age_days
        }
      });
      results.push(result);
    }
    
    return results;
  }

  async deleteByPackageName(packageName: string): Promise<void> {
    await this.prisma.osvVulnerability.deleteMany({
      where: { package_name: packageName }
    });
  }

  async countByPackageName(packageName: string): Promise<number> {
    return this.prisma.osvVulnerability.count({
      where: { package_name: packageName }
    });
  }

  // New methods for enhanced filtering
  async findRelevantByPackageName(packageName: string, maxPatchAgeDays: number = 730): Promise<OsvVulnerability[]> {
    return this.prisma.osvVulnerability.findMany({
      where: {
        package_name: packageName,
        OR: [
          { is_patched: false }, // Always include unpatched
          { 
            is_patched: true,
            patch_age_days: { lte: maxPatchAgeDays }
          },
          {
            is_patched: true,
            severity: {
              contains: 'CRITICAL'
            }
          },
          {
            is_patched: true,
            severity: {
              contains: 'HIGH'
            }
          }
        ]
      },
      orderBy: [
        { is_patched: 'asc' }, // Unpatched first
        { published: 'desc' }
      ]
    });
  }

  async findUnpatchedByPackageName(packageName: string): Promise<OsvVulnerability[]> {
    return this.prisma.osvVulnerability.findMany({
      where: { 
        package_name: packageName,
        is_patched: false
      },
      orderBy: { published: 'desc' }
    });
  }

  async getVulnerabilityStats(packageName: string): Promise<{
    total: number;
    patched: number;
    unpatched: number;
    highSeverity: number;
    recentlyPatched: number;
  }> {
    const [total, patched, unpatched, highSeverity, recentlyPatched] = await Promise.all([
      this.prisma.osvVulnerability.count({
        where: { package_name: packageName }
      }),
      this.prisma.osvVulnerability.count({
        where: { package_name: packageName, is_patched: true }
      }),
      this.prisma.osvVulnerability.count({
        where: { package_name: packageName, is_patched: false }
      }),
      this.prisma.osvVulnerability.count({
        where: { 
          package_name: packageName,
          OR: [
            { severity: { contains: 'CRITICAL' } },
            { severity: { contains: 'HIGH' } }
          ]
        }
      }),
      this.prisma.osvVulnerability.count({
        where: { 
          package_name: packageName,
          is_patched: true,
          patch_age_days: { lte: 90 } // Patched in last 90 days
        }
      })
    ]);

    return {
      total,
      patched,
      unpatched,
      highSeverity,
      recentlyPatched
    };
  }
}
