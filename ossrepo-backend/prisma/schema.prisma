generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id        String          @id @default(uuid())
  email          String          @unique
  name           String?
  created_at     DateTime        @default(now())
  userWatchlists UserWatchlist[]

  @@map("users")
}

model Package {
  package_id     String   @id @default(uuid())
  package_name   String   @unique
  repo_url       String
  repo_name      String
  
  // Existing fields
  downloads      Int?
  last_updated   DateTime?
  stars          Int?
  forks          Int?                              // ADD ONLY THIS LINE
  contributors   Int?
  pushed_at      DateTime?
  risk_score     Float?
  fetched_at     DateTime?
  
  // NPM-style summary fields
  description    String?
  version        String?                           
  published_at   DateTime?                         
  maintainers    String[]                          
  keywords       String[]                          
  npm_url        String?                           
  homepage       String?                           
  license        String?                           

  // Relations
  watchlists     Watchlist[]
}

model Watchlist {
  watchlist_id                     String          @id @default(uuid())
  alert_cve_ids                    String[]
  updated_at                       DateTime?
  default_branch                   String?
  latest_commit_sha                String?
  commits_since_last_health_update Int?
  package_id                       String
  userWatchlistEntries             UserWatchlist[]
  package                          Package         @relation(fields: [package_id], references: [package_id])
}

model UserWatchlist {
  id           String    @id @default(uuid())
  user_id      String
  watchlist_id String
  added_at     DateTime  @default(now())
  alerts       String?
  notes        String?
  created_at   DateTime  @default(now())
  user         User      @relation(fields: [user_id], references: [user_id])
  watchlist    Watchlist @relation(fields: [watchlist_id], references: [watchlist_id])

  @@index([user_id])
  @@index([watchlist_id])
}

model BuildSubtask {
  subtask_id  String    @id
  task_id     String
  language    String
  step        String
  status      String
  message     String?
  created_at  DateTime  @default(now())
  started_at  DateTime?
  finished_at DateTime?
  BuildTask   BuildTask @relation(fields: [task_id], references: [task_id], onDelete: Cascade)
}

model BuildTask {
  task_id      String         @id
  repo_id      String
  status       String
  logs         String[]
  created_at   DateTime       @default(now())
  started_at   DateTime?
  finished_at  DateTime?
  commit_id    String?
  assigned_to  String?
  retry_count  Int            @default(0)
  BuildSubtask BuildSubtask[]
}

model GraphExport {
  export_id  String    @id
  repo_id    String
  format     String
  ready_time DateTime?
  s3_url     String?
  status     String
  actor      String?
  created_at DateTime  @default(now())
}
